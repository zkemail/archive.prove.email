generator client_js {
  provider = "prisma-client-js"
}

generator client_py {
  provider             = "prisma-client-py"
  recursive_type_depth = -1
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // direct connection
}

model DomainSelectorPair {
  id               Int          @id @default(autoincrement())
  domain           String
  selector         String
  lastRecordUpdate DateTime?
  records          DkimRecord[]
  sourceIdentifier String

  @@index([domain])
}

enum KeyType {
  RSA
  Ed25519
}

model DkimRecord {
  id                   Int                  @id @default(autoincrement())
  domainSelectorPair   DomainSelectorPair   @relation(fields: [domainSelectorPairId], references: [id])
  domainSelectorPairId Int
  firstSeenAt          DateTime
  lastSeenAt           DateTime?
  provenanceVerified   Boolean?
  value                String // The DKIM record as it appears in DNS TXT records
  keyType              KeyType?
  keyData              String?
  source               String?
  emailPairGcdResults  EmailPairGcdResult[]
}

model EmailSignature {
  id                   Int                  @id @default(autoincrement())
  domain               String
  selector             String
  headerHash           String
  dkimSignature        String
  timestamp            DateTime?
  signingAlgorithm     String
  canonInfo            String // info about what tool or library was used to generate the header hash
  email_A_in_gcd_pairs EmailPairGcdResult[] @relation(name: "gcdPairAsA")
  email_B_in_gcd_pairs EmailPairGcdResult[] @relation(name: "gcdPairAsB")
}

model EmailPairGcdResult {
  emailSignatureA    EmailSignature @relation(name: "gcdPairAsA", fields: [emailSignatureA_id], references: [id])
  emailSignatureA_id Int
  emailSignatureB    EmailSignature @relation(name: "gcdPairAsB", fields: [emailSignatureB_id], references: [id])
  emailSignatureB_id Int
  foundGcd           Boolean
  dkimRecord         DkimRecord?    @relation(fields: [dkimRecordId], references: [id])
  timestamp          DateTime
  dkimRecordId       Int?

  @@id([emailSignatureA_id, emailSignatureB_id])
}

model JsonWebKeySets {
  id                Int      @id @default(autoincrement())
  x509Certificate   String
  jwks              String
  lastUpdated       DateTime @updatedAt 
}